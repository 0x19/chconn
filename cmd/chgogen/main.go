package main

import (
	"context"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"github.com/dave/jennifer/jen"
	flag "github.com/spf13/pflag"
	"github.com/vahid-sohrabloo/chconn"
	"github.com/vahid-sohrabloo/chconn/internal/generator"
)

//nolint:funlen,gocyclo
func main() {
	getter := flag.Bool("getter", false, "generate gatter for properties")
	selectFuncQuery := flag.Bool("selectFuncQuery", false, "generate function to return select query")
	insertFuncQuery := flag.Bool("insertFuncQuery", false, "generate function to return insert query")
	structName := flag.String("name", "TableNameRow", "struct name")

	flag.Parse()
	var query string

	file := os.Stdin
	fi, err := file.Stat()
	if err != nil {
		log.Fatal(err)
	}
	size := fi.Size()
	if size == 0 {
		query = flag.Arg(0)
	} else {
		queryData, _ := ioutil.ReadAll(file)
		query = string(queryData)
	}

	ctx := context.Background()
	conn, err := chconn.Connect(ctx, "password=salam")
	if err != nil {
		log.Fatal(err)
	}

	// todo check insert or select query
	stmt, err := conn.Insert(ctx, query)
	if err != nil {
		log.Fatal(err)
	}
	block := stmt.GetBlock()

	f := jen.NewFile("main")

	generator.GenerateConsts(f, *structName, block.Columns)

	if *selectFuncQuery {
		generator.GenerateSelectQueryGetter(f, *structName, block.Columns)

	}

	if *insertFuncQuery {
		generator.GenerateInsertQueryGetter(f, *structName, block.Columns)
	}

	st := generator.GenerateStruct(f, *structName, block.Columns)

	generator.GenerateWriter(f, st, *structName, block.Columns)

	generator.GenerateSelect(f, st, *structName, block.Columns)

	if *getter {
		generator.GenerateGetter(f, st, *structName, block.Columns)
	}
	fmt.Printf("// Code generated by cgogen. DO NOT EDIT.\n%#v", f)
}
